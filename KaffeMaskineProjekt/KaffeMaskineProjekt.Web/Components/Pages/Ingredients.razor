@page "/ingredients"
@rendermode InteractiveServer
@inject KaffeApiClient KaffeApiClient
@using KaffeMaskineProjekt.DTO
@using KaffeMaskineProjekt.Web.Components.Common

<h3>Ingredients</h3>

<p>Add ingredient</p>
<InputText @bind-Value="@newIngredientName" placeholder="Ingredient Name" />
<button type="button" @onclick="AddIngredient">Add</button>

<p>All Ingredients:</p>
<CardList Items="ingredients">
    <IngredientCard Ingredient="@context">
    </IngredientCard>
</CardList>

@code {

    private List<IngredientDTO> ingredients = new List<IngredientDTO>();
    private string newIngredientName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ingredients = await KaffeApiClient.GetIngredientsAsync();
    }

    private async Task AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredientName))
        {
            var created = await KaffeApiClient.CreateIngredientAsync(new CreateIngredientModel{Name = newIngredientName});

            ingredients = await KaffeApiClient.GetIngredientsAsync(); // Refresh the ingredient list
            await InvokeAsync(StateHasChanged); // Ensure the UI is updated
        }
    }

    private async Task DeleteIngredient(IngredientDTO ingredient)
    {
        await KaffeApiClient.DeleteIngredientAsync(ingredient.Id);
        ingredients = await KaffeApiClient.GetIngredientsAsync(); // Refresh the ingredient list
        await InvokeAsync(StateHasChanged); // Ensure the UI is updated
    }

}
